// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: repository.proto

#include "repository.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_repository_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Distance_repository_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_repository_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_InternalNodeSpace_InternalNode_repository_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_repository_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Object_repository_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_repository_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DistanceSpace_Distances_repository_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_repository_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeafNodeSpace_LeafNode_repository_2eproto;
namespace croco {
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object> _instance;
} _Object_default_instance_;
class ObjectSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectSpace> _instance;
} _ObjectSpace_default_instance_;
class DistanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Distance> _instance;
} _Distance_default_instance_;
class DistanceSpace_DistancesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistanceSpace_Distances> _instance;
} _DistanceSpace_Distances_default_instance_;
class DistanceSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistanceSpace> _instance;
} _DistanceSpace_default_instance_;
class LeafNodeSpace_LeafNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafNodeSpace_LeafNode> _instance;
} _LeafNodeSpace_LeafNode_default_instance_;
class LeafNodeSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafNodeSpace> _instance;
} _LeafNodeSpace_default_instance_;
class InternalNodeSpace_InternalNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalNodeSpace_InternalNode> _instance;
} _InternalNodeSpace_InternalNode_default_instance_;
class InternalNodeSpaceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InternalNodeSpace> _instance;
} _InternalNodeSpace_default_instance_;
}  // namespace croco
static void InitDefaultsObject_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_Object_default_instance_;
    new (ptr) ::croco::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Object_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObject_repository_2eproto}, {}};

static void InitDefaultsObjectSpace_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_ObjectSpace_default_instance_;
    new (ptr) ::croco::ObjectSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::ObjectSpace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObjectSpace_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObjectSpace_repository_2eproto}, {
      &scc_info_Object_repository_2eproto.base,}};

static void InitDefaultsDistance_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_Distance_default_instance_;
    new (ptr) ::croco::Distance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::Distance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Distance_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDistance_repository_2eproto}, {}};

static void InitDefaultsDistanceSpace_Distances_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_DistanceSpace_Distances_default_instance_;
    new (ptr) ::croco::DistanceSpace_Distances();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::DistanceSpace_Distances::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DistanceSpace_Distances_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDistanceSpace_Distances_repository_2eproto}, {
      &scc_info_Distance_repository_2eproto.base,}};

static void InitDefaultsDistanceSpace_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_DistanceSpace_default_instance_;
    new (ptr) ::croco::DistanceSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::DistanceSpace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DistanceSpace_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDistanceSpace_repository_2eproto}, {
      &scc_info_DistanceSpace_Distances_repository_2eproto.base,}};

static void InitDefaultsLeafNodeSpace_LeafNode_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_LeafNodeSpace_LeafNode_default_instance_;
    new (ptr) ::croco::LeafNodeSpace_LeafNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::LeafNodeSpace_LeafNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeafNodeSpace_LeafNode_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeafNodeSpace_LeafNode_repository_2eproto}, {
      &scc_info_Distance_repository_2eproto.base,}};

static void InitDefaultsLeafNodeSpace_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_LeafNodeSpace_default_instance_;
    new (ptr) ::croco::LeafNodeSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::LeafNodeSpace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeafNodeSpace_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeafNodeSpace_repository_2eproto}, {
      &scc_info_LeafNodeSpace_LeafNode_repository_2eproto.base,}};

static void InitDefaultsInternalNodeSpace_InternalNode_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_InternalNodeSpace_InternalNode_default_instance_;
    new (ptr) ::croco::InternalNodeSpace_InternalNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::InternalNodeSpace_InternalNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InternalNodeSpace_InternalNode_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInternalNodeSpace_InternalNode_repository_2eproto}, {}};

static void InitDefaultsInternalNodeSpace_repository_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::croco::_InternalNodeSpace_default_instance_;
    new (ptr) ::croco::InternalNodeSpace();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::croco::InternalNodeSpace::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InternalNodeSpace_repository_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInternalNodeSpace_repository_2eproto}, {
      &scc_info_InternalNodeSpace_InternalNode_repository_2eproto.base,}};

namespace croco {

// ===================================================================

void Object::InitAsDefaultInstance() {
}
class Object::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:croco.Object)
}

void Object::SharedCtor() {
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:croco.Object)
  SharedDtor();
}

void Object::SharedDtor() {
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Object_repository_2eproto.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Object::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Object*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 members = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_members();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_members(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_members())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_members())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.Object)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 members = 1;
  if (this->members_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_members_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->members(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.Object)
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.Object)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 members = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->members_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _members_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Object*>(&from));
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  members_.InternalSwap(&other->members_);
}

::std::string Object::GetTypeName() const {
  return "croco.Object";
}


// ===================================================================

void ObjectSpace::InitAsDefaultInstance() {
}
class ObjectSpace::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectSpace::kObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectSpace::ObjectSpace()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.ObjectSpace)
}
ObjectSpace::ObjectSpace(const ObjectSpace& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:croco.ObjectSpace)
}

void ObjectSpace::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObjectSpace_repository_2eproto.base);
}

ObjectSpace::~ObjectSpace() {
  // @@protoc_insertion_point(destructor:croco.ObjectSpace)
  SharedDtor();
}

void ObjectSpace::SharedDtor() {
}

void ObjectSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectSpace& ObjectSpace::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObjectSpace_repository_2eproto.base);
  return *internal_default_instance();
}


void ObjectSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.ObjectSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectSpace::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObjectSpace*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .croco.Object objects = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::croco::Object::_InternalParse;
          object = msg->add_objects();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.ObjectSpace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .croco.Object objects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.ObjectSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.ObjectSpace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.ObjectSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .croco.Object objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.ObjectSpace)
}

size_t ObjectSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.ObjectSpace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .croco.Object objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSpace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObjectSpace*>(&from));
}

void ObjectSpace::MergeFrom(const ObjectSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.ObjectSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
}

void ObjectSpace::CopyFrom(const ObjectSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.ObjectSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSpace::IsInitialized() const {
  return true;
}

void ObjectSpace::Swap(ObjectSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectSpace::InternalSwap(ObjectSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
}

::std::string ObjectSpace::GetTypeName() const {
  return "croco.ObjectSpace";
}


// ===================================================================

void Distance::InitAsDefaultInstance() {
}
class Distance::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distance::kIdFieldNumber;
const int Distance::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distance::Distance()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.Distance)
}
Distance::Distance(const Distance& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:croco.Distance)
}

void Distance::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
}

Distance::~Distance() {
  // @@protoc_insertion_point(destructor:croco.Distance)
  SharedDtor();
}

void Distance::SharedDtor() {
}

void Distance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distance& Distance::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Distance_repository_2eproto.base);
  return *internal_default_instance();
}


void Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.Distance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&id_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distance::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Distance*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float distance = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.Distance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.Distance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.Distance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.Distance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // float distance = 2;
  if (this->distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.Distance)
}

size_t Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.Distance)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // float distance = 2;
  if (this->distance() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distance::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Distance*>(&from));
}

void Distance::MergeFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.Distance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.distance() != 0) {
    set_distance(from.distance());
  }
}

void Distance::CopyFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distance::IsInitialized() const {
  return true;
}

void Distance::Swap(Distance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distance::InternalSwap(Distance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(distance_, other->distance_);
}

::std::string Distance::GetTypeName() const {
  return "croco.Distance";
}


// ===================================================================

void DistanceSpace_Distances::InitAsDefaultInstance() {
}
class DistanceSpace_Distances::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceSpace_Distances::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceSpace_Distances::DistanceSpace_Distances()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.DistanceSpace.Distances)
}
DistanceSpace_Distances::DistanceSpace_Distances(const DistanceSpace_Distances& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:croco.DistanceSpace.Distances)
}

void DistanceSpace_Distances::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DistanceSpace_Distances_repository_2eproto.base);
}

DistanceSpace_Distances::~DistanceSpace_Distances() {
  // @@protoc_insertion_point(destructor:croco.DistanceSpace.Distances)
  SharedDtor();
}

void DistanceSpace_Distances::SharedDtor() {
}

void DistanceSpace_Distances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceSpace_Distances& DistanceSpace_Distances::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistanceSpace_Distances_repository_2eproto.base);
  return *internal_default_instance();
}


void DistanceSpace_Distances::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.DistanceSpace.Distances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistanceSpace_Distances::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistanceSpace_Distances*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .croco.Distance members = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::croco::Distance::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistanceSpace_Distances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.DistanceSpace.Distances)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .croco.Distance members = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.DistanceSpace.Distances)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.DistanceSpace.Distances)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistanceSpace_Distances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.DistanceSpace.Distances)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .croco.Distance members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->members(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.DistanceSpace.Distances)
}

size_t DistanceSpace_Distances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.DistanceSpace.Distances)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .croco.Distance members = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceSpace_Distances::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistanceSpace_Distances*>(&from));
}

void DistanceSpace_Distances::MergeFrom(const DistanceSpace_Distances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.DistanceSpace.Distances)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
}

void DistanceSpace_Distances::CopyFrom(const DistanceSpace_Distances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.DistanceSpace.Distances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSpace_Distances::IsInitialized() const {
  return true;
}

void DistanceSpace_Distances::Swap(DistanceSpace_Distances* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceSpace_Distances::InternalSwap(DistanceSpace_Distances* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
}

::std::string DistanceSpace_Distances::GetTypeName() const {
  return "croco.DistanceSpace.Distances";
}


// ===================================================================

void DistanceSpace::InitAsDefaultInstance() {
}
class DistanceSpace::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceSpace::kDistancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceSpace::DistanceSpace()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.DistanceSpace)
}
DistanceSpace::DistanceSpace(const DistanceSpace& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:croco.DistanceSpace)
}

void DistanceSpace::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DistanceSpace_repository_2eproto.base);
}

DistanceSpace::~DistanceSpace() {
  // @@protoc_insertion_point(destructor:croco.DistanceSpace)
  SharedDtor();
}

void DistanceSpace::SharedDtor() {
}

void DistanceSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceSpace& DistanceSpace::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DistanceSpace_repository_2eproto.base);
  return *internal_default_instance();
}


void DistanceSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.DistanceSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distances_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DistanceSpace::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DistanceSpace*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .croco.DistanceSpace.Distances distances = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::croco::DistanceSpace_Distances::_InternalParse;
          object = msg->add_distances();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DistanceSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.DistanceSpace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .croco.DistanceSpace.Distances distances = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_distances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.DistanceSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.DistanceSpace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DistanceSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.DistanceSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .croco.DistanceSpace.Distances distances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->distances(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.DistanceSpace)
}

size_t DistanceSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.DistanceSpace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .croco.DistanceSpace.Distances distances = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->distances_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->distances(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceSpace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DistanceSpace*>(&from));
}

void DistanceSpace::MergeFrom(const DistanceSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.DistanceSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distances_.MergeFrom(from.distances_);
}

void DistanceSpace::CopyFrom(const DistanceSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.DistanceSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceSpace::IsInitialized() const {
  return true;
}

void DistanceSpace::Swap(DistanceSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceSpace::InternalSwap(DistanceSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&distances_)->InternalSwap(CastToBase(&other->distances_));
}

::std::string DistanceSpace::GetTypeName() const {
  return "croco.DistanceSpace";
}


// ===================================================================

void LeafNodeSpace_LeafNode::InitAsDefaultInstance() {
}
class LeafNodeSpace_LeafNode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafNodeSpace_LeafNode::kIdFieldNumber;
const int LeafNodeSpace_LeafNode::kParentFieldNumber;
const int LeafNodeSpace_LeafNode::kDistancesFieldNumber;
const int LeafNodeSpace_LeafNode::kPivotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafNodeSpace_LeafNode::LeafNodeSpace_LeafNode()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.LeafNodeSpace.LeafNode)
}
LeafNodeSpace_LeafNode::LeafNodeSpace_LeafNode(const LeafNodeSpace_LeafNode& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      pivot_(from.pivot_),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_));
  // @@protoc_insertion_point(copy_constructor:croco.LeafNodeSpace.LeafNode)
}

void LeafNodeSpace_LeafNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeafNodeSpace_LeafNode_repository_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_));
}

LeafNodeSpace_LeafNode::~LeafNodeSpace_LeafNode() {
  // @@protoc_insertion_point(destructor:croco.LeafNodeSpace.LeafNode)
  SharedDtor();
}

void LeafNodeSpace_LeafNode::SharedDtor() {
}

void LeafNodeSpace_LeafNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafNodeSpace_LeafNode& LeafNodeSpace_LeafNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeafNodeSpace_LeafNode_repository_2eproto.base);
  return *internal_default_instance();
}


void LeafNodeSpace_LeafNode::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.LeafNodeSpace.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pivot_.Clear();
  distances_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeafNodeSpace_LeafNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeafNodeSpace_LeafNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 parent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_parent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 pivot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_pivot();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_pivot(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated .croco.Distance distances = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::croco::Distance::_InternalParse;
          object = msg->add_distances();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeafNodeSpace_LeafNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.LeafNodeSpace.LeafNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pivot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pivot())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_pivot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .croco.Distance distances = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_distances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.LeafNodeSpace.LeafNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.LeafNodeSpace.LeafNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeafNodeSpace_LeafNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.LeafNodeSpace.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(), output);
  }

  // repeated uint32 pivot = 3;
  if (this->pivot_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pivot_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pivot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->pivot(i), output);
  }

  // repeated .croco.Distance distances = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->distances(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.LeafNodeSpace.LeafNode)
}

size_t LeafNodeSpace_LeafNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.LeafNodeSpace.LeafNode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pivot = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pivot_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _pivot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .croco.Distance distances = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->distances_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->distances(static_cast<int>(i)));
    }
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafNodeSpace_LeafNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeafNodeSpace_LeafNode*>(&from));
}

void LeafNodeSpace_LeafNode::MergeFrom(const LeafNodeSpace_LeafNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.LeafNodeSpace.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pivot_.MergeFrom(from.pivot_);
  distances_.MergeFrom(from.distances_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent() != 0) {
    set_parent(from.parent());
  }
}

void LeafNodeSpace_LeafNode::CopyFrom(const LeafNodeSpace_LeafNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.LeafNodeSpace.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNodeSpace_LeafNode::IsInitialized() const {
  return true;
}

void LeafNodeSpace_LeafNode::Swap(LeafNodeSpace_LeafNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafNodeSpace_LeafNode::InternalSwap(LeafNodeSpace_LeafNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pivot_.InternalSwap(&other->pivot_);
  CastToBase(&distances_)->InternalSwap(CastToBase(&other->distances_));
  swap(id_, other->id_);
  swap(parent_, other->parent_);
}

::std::string LeafNodeSpace_LeafNode::GetTypeName() const {
  return "croco.LeafNodeSpace.LeafNode";
}


// ===================================================================

void LeafNodeSpace::InitAsDefaultInstance() {
}
class LeafNodeSpace::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafNodeSpace::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafNodeSpace::LeafNodeSpace()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.LeafNodeSpace)
}
LeafNodeSpace::LeafNodeSpace(const LeafNodeSpace& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:croco.LeafNodeSpace)
}

void LeafNodeSpace::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeafNodeSpace_repository_2eproto.base);
}

LeafNodeSpace::~LeafNodeSpace() {
  // @@protoc_insertion_point(destructor:croco.LeafNodeSpace)
  SharedDtor();
}

void LeafNodeSpace::SharedDtor() {
}

void LeafNodeSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafNodeSpace& LeafNodeSpace::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeafNodeSpace_repository_2eproto.base);
  return *internal_default_instance();
}


void LeafNodeSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.LeafNodeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeafNodeSpace::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeafNodeSpace*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .croco.LeafNodeSpace.LeafNode nodes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::croco::LeafNodeSpace_LeafNode::_InternalParse;
          object = msg->add_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeafNodeSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.LeafNodeSpace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .croco.LeafNodeSpace.LeafNode nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.LeafNodeSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.LeafNodeSpace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeafNodeSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.LeafNodeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .croco.LeafNodeSpace.LeafNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.LeafNodeSpace)
}

size_t LeafNodeSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.LeafNodeSpace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .croco.LeafNodeSpace.LeafNode nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafNodeSpace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LeafNodeSpace*>(&from));
}

void LeafNodeSpace::MergeFrom(const LeafNodeSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.LeafNodeSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void LeafNodeSpace::CopyFrom(const LeafNodeSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.LeafNodeSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNodeSpace::IsInitialized() const {
  return true;
}

void LeafNodeSpace::Swap(LeafNodeSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafNodeSpace::InternalSwap(LeafNodeSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
}

::std::string LeafNodeSpace::GetTypeName() const {
  return "croco.LeafNodeSpace";
}


// ===================================================================

void InternalNodeSpace_InternalNode::InitAsDefaultInstance() {
}
class InternalNodeSpace_InternalNode::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalNodeSpace_InternalNode::kIdFieldNumber;
const int InternalNodeSpace_InternalNode::kParentFieldNumber;
const int InternalNodeSpace_InternalNode::kPivotFieldNumber;
const int InternalNodeSpace_InternalNode::kChildrenFieldNumber;
const int InternalNodeSpace_InternalNode::kBordersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalNodeSpace_InternalNode::InternalNodeSpace_InternalNode()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.InternalNodeSpace.InternalNode)
}
InternalNodeSpace_InternalNode::InternalNodeSpace_InternalNode(const InternalNodeSpace_InternalNode& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      pivot_(from.pivot_),
      children_(from.children_),
      borders_(from.borders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_) -
    reinterpret_cast<char*>(&id_)) + sizeof(parent_));
  // @@protoc_insertion_point(copy_constructor:croco.InternalNodeSpace.InternalNode)
}

void InternalNodeSpace_InternalNode::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_));
}

InternalNodeSpace_InternalNode::~InternalNodeSpace_InternalNode() {
  // @@protoc_insertion_point(destructor:croco.InternalNodeSpace.InternalNode)
  SharedDtor();
}

void InternalNodeSpace_InternalNode::SharedDtor() {
}

void InternalNodeSpace_InternalNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalNodeSpace_InternalNode& InternalNodeSpace_InternalNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InternalNodeSpace_InternalNode_repository_2eproto.base);
  return *internal_default_instance();
}


void InternalNodeSpace_InternalNode::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.InternalNodeSpace.InternalNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pivot_.Clear();
  children_.Clear();
  borders_.Clear();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_) -
      reinterpret_cast<char*>(&id_)) + sizeof(parent_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InternalNodeSpace_InternalNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InternalNodeSpace_InternalNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 parent = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_parent(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 pivot = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_pivot();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_pivot(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated uint32 children = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_children();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_children(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // repeated float borders = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_borders();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        do {
          msg->add_borders(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 45 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InternalNodeSpace_InternalNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.InternalNodeSpace.InternalNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 pivot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pivot())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_pivot())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 children = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_children())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_children())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float borders = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_borders())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_borders())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.InternalNodeSpace.InternalNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.InternalNodeSpace.InternalNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InternalNodeSpace_InternalNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.InternalNodeSpace.InternalNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->parent(), output);
  }

  // repeated uint32 pivot = 3;
  if (this->pivot_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pivot_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->pivot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->pivot(i), output);
  }

  // repeated uint32 children = 4;
  if (this->children_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_children_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->children(i), output);
  }

  // repeated float borders = 5;
  if (this->borders_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_borders_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->borders().data(), this->borders_size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.InternalNodeSpace.InternalNode)
}

size_t InternalNodeSpace_InternalNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.InternalNodeSpace.InternalNode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 pivot = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->pivot_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _pivot_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 children = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->children_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float borders = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->borders_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _borders_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 parent = 2;
  if (this->parent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parent());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalNodeSpace_InternalNode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalNodeSpace_InternalNode*>(&from));
}

void InternalNodeSpace_InternalNode::MergeFrom(const InternalNodeSpace_InternalNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.InternalNodeSpace.InternalNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pivot_.MergeFrom(from.pivot_);
  children_.MergeFrom(from.children_);
  borders_.MergeFrom(from.borders_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent() != 0) {
    set_parent(from.parent());
  }
}

void InternalNodeSpace_InternalNode::CopyFrom(const InternalNodeSpace_InternalNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.InternalNodeSpace.InternalNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalNodeSpace_InternalNode::IsInitialized() const {
  return true;
}

void InternalNodeSpace_InternalNode::Swap(InternalNodeSpace_InternalNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalNodeSpace_InternalNode::InternalSwap(InternalNodeSpace_InternalNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pivot_.InternalSwap(&other->pivot_);
  children_.InternalSwap(&other->children_);
  borders_.InternalSwap(&other->borders_);
  swap(id_, other->id_);
  swap(parent_, other->parent_);
}

::std::string InternalNodeSpace_InternalNode::GetTypeName() const {
  return "croco.InternalNodeSpace.InternalNode";
}


// ===================================================================

void InternalNodeSpace::InitAsDefaultInstance() {
}
class InternalNodeSpace::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InternalNodeSpace::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InternalNodeSpace::InternalNodeSpace()
  : ::google::protobuf::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:croco.InternalNodeSpace)
}
InternalNodeSpace::InternalNodeSpace(const InternalNodeSpace& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:croco.InternalNodeSpace)
}

void InternalNodeSpace::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InternalNodeSpace_repository_2eproto.base);
}

InternalNodeSpace::~InternalNodeSpace() {
  // @@protoc_insertion_point(destructor:croco.InternalNodeSpace)
  SharedDtor();
}

void InternalNodeSpace::SharedDtor() {
}

void InternalNodeSpace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalNodeSpace& InternalNodeSpace::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InternalNodeSpace_repository_2eproto.base);
  return *internal_default_instance();
}


void InternalNodeSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:croco.InternalNodeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InternalNodeSpace::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InternalNodeSpace*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .croco.InternalNodeSpace.InternalNode nodes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::croco::InternalNodeSpace_InternalNode::_InternalParse;
          object = msg->add_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InternalNodeSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:croco.InternalNodeSpace)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .croco.InternalNodeSpace.InternalNode nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:croco.InternalNodeSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:croco.InternalNodeSpace)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InternalNodeSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:croco.InternalNodeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .croco.InternalNodeSpace.InternalNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->nodes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:croco.InternalNodeSpace)
}

size_t InternalNodeSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:croco.InternalNodeSpace)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .croco.InternalNodeSpace.InternalNode nodes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalNodeSpace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InternalNodeSpace*>(&from));
}

void InternalNodeSpace::MergeFrom(const InternalNodeSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:croco.InternalNodeSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void InternalNodeSpace::CopyFrom(const InternalNodeSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:croco.InternalNodeSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalNodeSpace::IsInitialized() const {
  return true;
}

void InternalNodeSpace::Swap(InternalNodeSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InternalNodeSpace::InternalSwap(InternalNodeSpace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
}

::std::string InternalNodeSpace::GetTypeName() const {
  return "croco.InternalNodeSpace";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace croco
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::croco::Object* Arena::CreateMaybeMessage< ::croco::Object >(Arena* arena) {
  return Arena::CreateInternal< ::croco::Object >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::ObjectSpace* Arena::CreateMaybeMessage< ::croco::ObjectSpace >(Arena* arena) {
  return Arena::CreateInternal< ::croco::ObjectSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::Distance* Arena::CreateMaybeMessage< ::croco::Distance >(Arena* arena) {
  return Arena::CreateInternal< ::croco::Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::DistanceSpace_Distances* Arena::CreateMaybeMessage< ::croco::DistanceSpace_Distances >(Arena* arena) {
  return Arena::CreateInternal< ::croco::DistanceSpace_Distances >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::DistanceSpace* Arena::CreateMaybeMessage< ::croco::DistanceSpace >(Arena* arena) {
  return Arena::CreateInternal< ::croco::DistanceSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::LeafNodeSpace_LeafNode* Arena::CreateMaybeMessage< ::croco::LeafNodeSpace_LeafNode >(Arena* arena) {
  return Arena::CreateInternal< ::croco::LeafNodeSpace_LeafNode >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::LeafNodeSpace* Arena::CreateMaybeMessage< ::croco::LeafNodeSpace >(Arena* arena) {
  return Arena::CreateInternal< ::croco::LeafNodeSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::InternalNodeSpace_InternalNode* Arena::CreateMaybeMessage< ::croco::InternalNodeSpace_InternalNode >(Arena* arena) {
  return Arena::CreateInternal< ::croco::InternalNodeSpace_InternalNode >(arena);
}
template<> PROTOBUF_NOINLINE ::croco::InternalNodeSpace* Arena::CreateMaybeMessage< ::croco::InternalNodeSpace >(Arena* arena) {
  return Arena::CreateInternal< ::croco::InternalNodeSpace >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
