// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: repository.proto

#ifndef PROTOBUF_INCLUDED_repository_2eproto
#define PROTOBUF_INCLUDED_repository_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_repository_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_repository_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
namespace croco {
class Distance;
class DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class DistanceSpace;
class DistanceSpaceDefaultTypeInternal;
extern DistanceSpaceDefaultTypeInternal _DistanceSpace_default_instance_;
class DistanceSpace_Distances;
class DistanceSpace_DistancesDefaultTypeInternal;
extern DistanceSpace_DistancesDefaultTypeInternal _DistanceSpace_Distances_default_instance_;
class InternalNodeSpace;
class InternalNodeSpaceDefaultTypeInternal;
extern InternalNodeSpaceDefaultTypeInternal _InternalNodeSpace_default_instance_;
class InternalNodeSpace_InternalNode;
class InternalNodeSpace_InternalNodeDefaultTypeInternal;
extern InternalNodeSpace_InternalNodeDefaultTypeInternal _InternalNodeSpace_InternalNode_default_instance_;
class LeafNodeSpace;
class LeafNodeSpaceDefaultTypeInternal;
extern LeafNodeSpaceDefaultTypeInternal _LeafNodeSpace_default_instance_;
class LeafNodeSpace_LeafNode;
class LeafNodeSpace_LeafNodeDefaultTypeInternal;
extern LeafNodeSpace_LeafNodeDefaultTypeInternal _LeafNodeSpace_LeafNode_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectSpace;
class ObjectSpaceDefaultTypeInternal;
extern ObjectSpaceDefaultTypeInternal _ObjectSpace_default_instance_;
}  // namespace croco
namespace google {
namespace protobuf {
template<> ::croco::Distance* Arena::CreateMaybeMessage<::croco::Distance>(Arena*);
template<> ::croco::DistanceSpace* Arena::CreateMaybeMessage<::croco::DistanceSpace>(Arena*);
template<> ::croco::DistanceSpace_Distances* Arena::CreateMaybeMessage<::croco::DistanceSpace_Distances>(Arena*);
template<> ::croco::InternalNodeSpace* Arena::CreateMaybeMessage<::croco::InternalNodeSpace>(Arena*);
template<> ::croco::InternalNodeSpace_InternalNode* Arena::CreateMaybeMessage<::croco::InternalNodeSpace_InternalNode>(Arena*);
template<> ::croco::LeafNodeSpace* Arena::CreateMaybeMessage<::croco::LeafNodeSpace>(Arena*);
template<> ::croco::LeafNodeSpace_LeafNode* Arena::CreateMaybeMessage<::croco::LeafNodeSpace_LeafNode>(Arena*);
template<> ::croco::Object* Arena::CreateMaybeMessage<::croco::Object>(Arena*);
template<> ::croco::ObjectSpace* Arena::CreateMaybeMessage<::croco::ObjectSpace>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace croco {

// ===================================================================

class Object :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Object& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const final {
    return CreateMaybeMessage<Object>(nullptr);
  }

  Object* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Object>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  ::google::protobuf::uint32 members(int index) const;
  void set_members(int index, ::google::protobuf::uint32 value);
  void add_members(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      members() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:croco.Object)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > members_;
  mutable std::atomic<int> _members_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class ObjectSpace :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.ObjectSpace) */ {
 public:
  ObjectSpace();
  virtual ~ObjectSpace();

  ObjectSpace(const ObjectSpace& from);

  inline ObjectSpace& operator=(const ObjectSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectSpace(ObjectSpace&& from) noexcept
    : ObjectSpace() {
    *this = ::std::move(from);
  }

  inline ObjectSpace& operator=(ObjectSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ObjectSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectSpace* internal_default_instance() {
    return reinterpret_cast<const ObjectSpace*>(
               &_ObjectSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectSpace* other);
  friend void swap(ObjectSpace& a, ObjectSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectSpace* New() const final {
    return CreateMaybeMessage<ObjectSpace>(nullptr);
  }

  ObjectSpace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectSpace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const ObjectSpace& from);
  void MergeFrom(const ObjectSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjectSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .croco.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  ::croco::Object* mutable_objects(int index);
  ::google::protobuf::RepeatedPtrField< ::croco::Object >*
      mutable_objects();
  const ::croco::Object& objects(int index) const;
  ::croco::Object* add_objects();
  const ::google::protobuf::RepeatedPtrField< ::croco::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:croco.ObjectSpace)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::croco::Object > objects_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class Distance :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.Distance) */ {
 public:
  Distance();
  virtual ~Distance();

  Distance(const Distance& from);

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(Distance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Distance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Distance* other);
  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Distance* New() const final {
    return CreateMaybeMessage<Distance>(nullptr);
  }

  Distance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Distance& from);
  void MergeFrom(const Distance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Distance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  float distance() const;
  void set_distance(float value);

  // @@protoc_insertion_point(class_scope:croco.Distance)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 id_;
  float distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class DistanceSpace_Distances :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.DistanceSpace.Distances) */ {
 public:
  DistanceSpace_Distances();
  virtual ~DistanceSpace_Distances();

  DistanceSpace_Distances(const DistanceSpace_Distances& from);

  inline DistanceSpace_Distances& operator=(const DistanceSpace_Distances& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistanceSpace_Distances(DistanceSpace_Distances&& from) noexcept
    : DistanceSpace_Distances() {
    *this = ::std::move(from);
  }

  inline DistanceSpace_Distances& operator=(DistanceSpace_Distances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DistanceSpace_Distances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceSpace_Distances* internal_default_instance() {
    return reinterpret_cast<const DistanceSpace_Distances*>(
               &_DistanceSpace_Distances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DistanceSpace_Distances* other);
  friend void swap(DistanceSpace_Distances& a, DistanceSpace_Distances& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistanceSpace_Distances* New() const final {
    return CreateMaybeMessage<DistanceSpace_Distances>(nullptr);
  }

  DistanceSpace_Distances* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistanceSpace_Distances>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DistanceSpace_Distances& from);
  void MergeFrom(const DistanceSpace_Distances& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistanceSpace_Distances* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .croco.Distance members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  ::croco::Distance* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::croco::Distance >*
      mutable_members();
  const ::croco::Distance& members(int index) const;
  ::croco::Distance* add_members();
  const ::google::protobuf::RepeatedPtrField< ::croco::Distance >&
      members() const;

  // @@protoc_insertion_point(class_scope:croco.DistanceSpace.Distances)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::croco::Distance > members_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class DistanceSpace :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.DistanceSpace) */ {
 public:
  DistanceSpace();
  virtual ~DistanceSpace();

  DistanceSpace(const DistanceSpace& from);

  inline DistanceSpace& operator=(const DistanceSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistanceSpace(DistanceSpace&& from) noexcept
    : DistanceSpace() {
    *this = ::std::move(from);
  }

  inline DistanceSpace& operator=(DistanceSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DistanceSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceSpace* internal_default_instance() {
    return reinterpret_cast<const DistanceSpace*>(
               &_DistanceSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DistanceSpace* other);
  friend void swap(DistanceSpace& a, DistanceSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistanceSpace* New() const final {
    return CreateMaybeMessage<DistanceSpace>(nullptr);
  }

  DistanceSpace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistanceSpace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DistanceSpace& from);
  void MergeFrom(const DistanceSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistanceSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DistanceSpace_Distances Distances;

  // accessors -------------------------------------------------------

  // repeated .croco.DistanceSpace.Distances distances = 1;
  int distances_size() const;
  void clear_distances();
  static const int kDistancesFieldNumber = 1;
  ::croco::DistanceSpace_Distances* mutable_distances(int index);
  ::google::protobuf::RepeatedPtrField< ::croco::DistanceSpace_Distances >*
      mutable_distances();
  const ::croco::DistanceSpace_Distances& distances(int index) const;
  ::croco::DistanceSpace_Distances* add_distances();
  const ::google::protobuf::RepeatedPtrField< ::croco::DistanceSpace_Distances >&
      distances() const;

  // @@protoc_insertion_point(class_scope:croco.DistanceSpace)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::croco::DistanceSpace_Distances > distances_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class LeafNodeSpace_LeafNode :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.LeafNodeSpace.LeafNode) */ {
 public:
  LeafNodeSpace_LeafNode();
  virtual ~LeafNodeSpace_LeafNode();

  LeafNodeSpace_LeafNode(const LeafNodeSpace_LeafNode& from);

  inline LeafNodeSpace_LeafNode& operator=(const LeafNodeSpace_LeafNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeafNodeSpace_LeafNode(LeafNodeSpace_LeafNode&& from) noexcept
    : LeafNodeSpace_LeafNode() {
    *this = ::std::move(from);
  }

  inline LeafNodeSpace_LeafNode& operator=(LeafNodeSpace_LeafNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LeafNodeSpace_LeafNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafNodeSpace_LeafNode* internal_default_instance() {
    return reinterpret_cast<const LeafNodeSpace_LeafNode*>(
               &_LeafNodeSpace_LeafNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LeafNodeSpace_LeafNode* other);
  friend void swap(LeafNodeSpace_LeafNode& a, LeafNodeSpace_LeafNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeafNodeSpace_LeafNode* New() const final {
    return CreateMaybeMessage<LeafNodeSpace_LeafNode>(nullptr);
  }

  LeafNodeSpace_LeafNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeafNodeSpace_LeafNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LeafNodeSpace_LeafNode& from);
  void MergeFrom(const LeafNodeSpace_LeafNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeafNodeSpace_LeafNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pivot = 3;
  int pivot_size() const;
  void clear_pivot();
  static const int kPivotFieldNumber = 3;
  ::google::protobuf::uint32 pivot(int index) const;
  void set_pivot(int index, ::google::protobuf::uint32 value);
  void add_pivot(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pivot() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pivot();

  // repeated .croco.Distance distances = 4;
  int distances_size() const;
  void clear_distances();
  static const int kDistancesFieldNumber = 4;
  ::croco::Distance* mutable_distances(int index);
  ::google::protobuf::RepeatedPtrField< ::croco::Distance >*
      mutable_distances();
  const ::croco::Distance& distances(int index) const;
  ::croco::Distance* add_distances();
  const ::google::protobuf::RepeatedPtrField< ::croco::Distance >&
      distances() const;

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  ::google::protobuf::uint32 parent() const;
  void set_parent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:croco.LeafNodeSpace.LeafNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pivot_;
  mutable std::atomic<int> _pivot_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::croco::Distance > distances_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class LeafNodeSpace :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.LeafNodeSpace) */ {
 public:
  LeafNodeSpace();
  virtual ~LeafNodeSpace();

  LeafNodeSpace(const LeafNodeSpace& from);

  inline LeafNodeSpace& operator=(const LeafNodeSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeafNodeSpace(LeafNodeSpace&& from) noexcept
    : LeafNodeSpace() {
    *this = ::std::move(from);
  }

  inline LeafNodeSpace& operator=(LeafNodeSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LeafNodeSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafNodeSpace* internal_default_instance() {
    return reinterpret_cast<const LeafNodeSpace*>(
               &_LeafNodeSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LeafNodeSpace* other);
  friend void swap(LeafNodeSpace& a, LeafNodeSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeafNodeSpace* New() const final {
    return CreateMaybeMessage<LeafNodeSpace>(nullptr);
  }

  LeafNodeSpace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LeafNodeSpace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LeafNodeSpace& from);
  void MergeFrom(const LeafNodeSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeafNodeSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LeafNodeSpace_LeafNode LeafNode;

  // accessors -------------------------------------------------------

  // repeated .croco.LeafNodeSpace.LeafNode nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::croco::LeafNodeSpace_LeafNode* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::croco::LeafNodeSpace_LeafNode >*
      mutable_nodes();
  const ::croco::LeafNodeSpace_LeafNode& nodes(int index) const;
  ::croco::LeafNodeSpace_LeafNode* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::croco::LeafNodeSpace_LeafNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:croco.LeafNodeSpace)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::croco::LeafNodeSpace_LeafNode > nodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class InternalNodeSpace_InternalNode :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.InternalNodeSpace.InternalNode) */ {
 public:
  InternalNodeSpace_InternalNode();
  virtual ~InternalNodeSpace_InternalNode();

  InternalNodeSpace_InternalNode(const InternalNodeSpace_InternalNode& from);

  inline InternalNodeSpace_InternalNode& operator=(const InternalNodeSpace_InternalNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalNodeSpace_InternalNode(InternalNodeSpace_InternalNode&& from) noexcept
    : InternalNodeSpace_InternalNode() {
    *this = ::std::move(from);
  }

  inline InternalNodeSpace_InternalNode& operator=(InternalNodeSpace_InternalNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const InternalNodeSpace_InternalNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalNodeSpace_InternalNode* internal_default_instance() {
    return reinterpret_cast<const InternalNodeSpace_InternalNode*>(
               &_InternalNodeSpace_InternalNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(InternalNodeSpace_InternalNode* other);
  friend void swap(InternalNodeSpace_InternalNode& a, InternalNodeSpace_InternalNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalNodeSpace_InternalNode* New() const final {
    return CreateMaybeMessage<InternalNodeSpace_InternalNode>(nullptr);
  }

  InternalNodeSpace_InternalNode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalNodeSpace_InternalNode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InternalNodeSpace_InternalNode& from);
  void MergeFrom(const InternalNodeSpace_InternalNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalNodeSpace_InternalNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pivot = 3;
  int pivot_size() const;
  void clear_pivot();
  static const int kPivotFieldNumber = 3;
  ::google::protobuf::uint32 pivot(int index) const;
  void set_pivot(int index, ::google::protobuf::uint32 value);
  void add_pivot(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pivot() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pivot();

  // repeated uint32 children = 4;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 4;
  ::google::protobuf::uint32 children(int index) const;
  void set_children(int index, ::google::protobuf::uint32 value);
  void add_children(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      children() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_children();

  // repeated float borders = 5;
  int borders_size() const;
  void clear_borders();
  static const int kBordersFieldNumber = 5;
  float borders(int index) const;
  void set_borders(int index, float value);
  void add_borders(float value);
  const ::google::protobuf::RepeatedField< float >&
      borders() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_borders();

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 parent = 2;
  void clear_parent();
  static const int kParentFieldNumber = 2;
  ::google::protobuf::uint32 parent() const;
  void set_parent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:croco.InternalNodeSpace.InternalNode)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pivot_;
  mutable std::atomic<int> _pivot_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > children_;
  mutable std::atomic<int> _children_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > borders_;
  mutable std::atomic<int> _borders_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// -------------------------------------------------------------------

class InternalNodeSpace :
    public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:croco.InternalNodeSpace) */ {
 public:
  InternalNodeSpace();
  virtual ~InternalNodeSpace();

  InternalNodeSpace(const InternalNodeSpace& from);

  inline InternalNodeSpace& operator=(const InternalNodeSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InternalNodeSpace(InternalNodeSpace&& from) noexcept
    : InternalNodeSpace() {
    *this = ::std::move(from);
  }

  inline InternalNodeSpace& operator=(InternalNodeSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const InternalNodeSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalNodeSpace* internal_default_instance() {
    return reinterpret_cast<const InternalNodeSpace*>(
               &_InternalNodeSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(InternalNodeSpace* other);
  friend void swap(InternalNodeSpace& a, InternalNodeSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InternalNodeSpace* New() const final {
    return CreateMaybeMessage<InternalNodeSpace>(nullptr);
  }

  InternalNodeSpace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InternalNodeSpace>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const InternalNodeSpace& from);
  void MergeFrom(const InternalNodeSpace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalNodeSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InternalNodeSpace_InternalNode InternalNode;

  // accessors -------------------------------------------------------

  // repeated .croco.InternalNodeSpace.InternalNode nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::croco::InternalNodeSpace_InternalNode* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::croco::InternalNodeSpace_InternalNode >*
      mutable_nodes();
  const ::croco::InternalNodeSpace_InternalNode& nodes(int index) const;
  ::croco::InternalNodeSpace_InternalNode* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::croco::InternalNodeSpace_InternalNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:croco.InternalNodeSpace)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::croco::InternalNodeSpace_InternalNode > nodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_repository_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object

// repeated uint32 members = 1;
inline int Object::members_size() const {
  return members_.size();
}
inline void Object::clear_members() {
  members_.Clear();
}
inline ::google::protobuf::uint32 Object::members(int index) const {
  // @@protoc_insertion_point(field_get:croco.Object.members)
  return members_.Get(index);
}
inline void Object::set_members(int index, ::google::protobuf::uint32 value) {
  members_.Set(index, value);
  // @@protoc_insertion_point(field_set:croco.Object.members)
}
inline void Object::add_members(::google::protobuf::uint32 value) {
  members_.Add(value);
  // @@protoc_insertion_point(field_add:croco.Object.members)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Object::members() const {
  // @@protoc_insertion_point(field_list:croco.Object.members)
  return members_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Object::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:croco.Object.members)
  return &members_;
}

// -------------------------------------------------------------------

// ObjectSpace

// repeated .croco.Object objects = 1;
inline int ObjectSpace::objects_size() const {
  return objects_.size();
}
inline void ObjectSpace::clear_objects() {
  objects_.Clear();
}
inline ::croco::Object* ObjectSpace::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:croco.ObjectSpace.objects)
  return objects_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::croco::Object >*
ObjectSpace::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:croco.ObjectSpace.objects)
  return &objects_;
}
inline const ::croco::Object& ObjectSpace::objects(int index) const {
  // @@protoc_insertion_point(field_get:croco.ObjectSpace.objects)
  return objects_.Get(index);
}
inline ::croco::Object* ObjectSpace::add_objects() {
  // @@protoc_insertion_point(field_add:croco.ObjectSpace.objects)
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::croco::Object >&
ObjectSpace::objects() const {
  // @@protoc_insertion_point(field_list:croco.ObjectSpace.objects)
  return objects_;
}

// -------------------------------------------------------------------

// Distance

// uint32 id = 1;
inline void Distance::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Distance::id() const {
  // @@protoc_insertion_point(field_get:croco.Distance.id)
  return id_;
}
inline void Distance::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:croco.Distance.id)
}

// float distance = 2;
inline void Distance::clear_distance() {
  distance_ = 0;
}
inline float Distance::distance() const {
  // @@protoc_insertion_point(field_get:croco.Distance.distance)
  return distance_;
}
inline void Distance::set_distance(float value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:croco.Distance.distance)
}

// -------------------------------------------------------------------

// DistanceSpace_Distances

// repeated .croco.Distance members = 1;
inline int DistanceSpace_Distances::members_size() const {
  return members_.size();
}
inline void DistanceSpace_Distances::clear_members() {
  members_.Clear();
}
inline ::croco::Distance* DistanceSpace_Distances::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:croco.DistanceSpace.Distances.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::croco::Distance >*
DistanceSpace_Distances::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:croco.DistanceSpace.Distances.members)
  return &members_;
}
inline const ::croco::Distance& DistanceSpace_Distances::members(int index) const {
  // @@protoc_insertion_point(field_get:croco.DistanceSpace.Distances.members)
  return members_.Get(index);
}
inline ::croco::Distance* DistanceSpace_Distances::add_members() {
  // @@protoc_insertion_point(field_add:croco.DistanceSpace.Distances.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::croco::Distance >&
DistanceSpace_Distances::members() const {
  // @@protoc_insertion_point(field_list:croco.DistanceSpace.Distances.members)
  return members_;
}

// -------------------------------------------------------------------

// DistanceSpace

// repeated .croco.DistanceSpace.Distances distances = 1;
inline int DistanceSpace::distances_size() const {
  return distances_.size();
}
inline void DistanceSpace::clear_distances() {
  distances_.Clear();
}
inline ::croco::DistanceSpace_Distances* DistanceSpace::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:croco.DistanceSpace.distances)
  return distances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::croco::DistanceSpace_Distances >*
DistanceSpace::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:croco.DistanceSpace.distances)
  return &distances_;
}
inline const ::croco::DistanceSpace_Distances& DistanceSpace::distances(int index) const {
  // @@protoc_insertion_point(field_get:croco.DistanceSpace.distances)
  return distances_.Get(index);
}
inline ::croco::DistanceSpace_Distances* DistanceSpace::add_distances() {
  // @@protoc_insertion_point(field_add:croco.DistanceSpace.distances)
  return distances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::croco::DistanceSpace_Distances >&
DistanceSpace::distances() const {
  // @@protoc_insertion_point(field_list:croco.DistanceSpace.distances)
  return distances_;
}

// -------------------------------------------------------------------

// LeafNodeSpace_LeafNode

// uint32 id = 1;
inline void LeafNodeSpace_LeafNode::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 LeafNodeSpace_LeafNode::id() const {
  // @@protoc_insertion_point(field_get:croco.LeafNodeSpace.LeafNode.id)
  return id_;
}
inline void LeafNodeSpace_LeafNode::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:croco.LeafNodeSpace.LeafNode.id)
}

// uint32 parent = 2;
inline void LeafNodeSpace_LeafNode::clear_parent() {
  parent_ = 0u;
}
inline ::google::protobuf::uint32 LeafNodeSpace_LeafNode::parent() const {
  // @@protoc_insertion_point(field_get:croco.LeafNodeSpace.LeafNode.parent)
  return parent_;
}
inline void LeafNodeSpace_LeafNode::set_parent(::google::protobuf::uint32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:croco.LeafNodeSpace.LeafNode.parent)
}

// repeated .croco.Distance distances = 4;
inline int LeafNodeSpace_LeafNode::distances_size() const {
  return distances_.size();
}
inline void LeafNodeSpace_LeafNode::clear_distances() {
  distances_.Clear();
}
inline ::croco::Distance* LeafNodeSpace_LeafNode::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:croco.LeafNodeSpace.LeafNode.distances)
  return distances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::croco::Distance >*
LeafNodeSpace_LeafNode::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:croco.LeafNodeSpace.LeafNode.distances)
  return &distances_;
}
inline const ::croco::Distance& LeafNodeSpace_LeafNode::distances(int index) const {
  // @@protoc_insertion_point(field_get:croco.LeafNodeSpace.LeafNode.distances)
  return distances_.Get(index);
}
inline ::croco::Distance* LeafNodeSpace_LeafNode::add_distances() {
  // @@protoc_insertion_point(field_add:croco.LeafNodeSpace.LeafNode.distances)
  return distances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::croco::Distance >&
LeafNodeSpace_LeafNode::distances() const {
  // @@protoc_insertion_point(field_list:croco.LeafNodeSpace.LeafNode.distances)
  return distances_;
}

// repeated uint32 pivot = 3;
inline int LeafNodeSpace_LeafNode::pivot_size() const {
  return pivot_.size();
}
inline void LeafNodeSpace_LeafNode::clear_pivot() {
  pivot_.Clear();
}
inline ::google::protobuf::uint32 LeafNodeSpace_LeafNode::pivot(int index) const {
  // @@protoc_insertion_point(field_get:croco.LeafNodeSpace.LeafNode.pivot)
  return pivot_.Get(index);
}
inline void LeafNodeSpace_LeafNode::set_pivot(int index, ::google::protobuf::uint32 value) {
  pivot_.Set(index, value);
  // @@protoc_insertion_point(field_set:croco.LeafNodeSpace.LeafNode.pivot)
}
inline void LeafNodeSpace_LeafNode::add_pivot(::google::protobuf::uint32 value) {
  pivot_.Add(value);
  // @@protoc_insertion_point(field_add:croco.LeafNodeSpace.LeafNode.pivot)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LeafNodeSpace_LeafNode::pivot() const {
  // @@protoc_insertion_point(field_list:croco.LeafNodeSpace.LeafNode.pivot)
  return pivot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LeafNodeSpace_LeafNode::mutable_pivot() {
  // @@protoc_insertion_point(field_mutable_list:croco.LeafNodeSpace.LeafNode.pivot)
  return &pivot_;
}

// -------------------------------------------------------------------

// LeafNodeSpace

// repeated .croco.LeafNodeSpace.LeafNode nodes = 1;
inline int LeafNodeSpace::nodes_size() const {
  return nodes_.size();
}
inline void LeafNodeSpace::clear_nodes() {
  nodes_.Clear();
}
inline ::croco::LeafNodeSpace_LeafNode* LeafNodeSpace::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:croco.LeafNodeSpace.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::croco::LeafNodeSpace_LeafNode >*
LeafNodeSpace::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:croco.LeafNodeSpace.nodes)
  return &nodes_;
}
inline const ::croco::LeafNodeSpace_LeafNode& LeafNodeSpace::nodes(int index) const {
  // @@protoc_insertion_point(field_get:croco.LeafNodeSpace.nodes)
  return nodes_.Get(index);
}
inline ::croco::LeafNodeSpace_LeafNode* LeafNodeSpace::add_nodes() {
  // @@protoc_insertion_point(field_add:croco.LeafNodeSpace.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::croco::LeafNodeSpace_LeafNode >&
LeafNodeSpace::nodes() const {
  // @@protoc_insertion_point(field_list:croco.LeafNodeSpace.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// InternalNodeSpace_InternalNode

// uint32 id = 1;
inline void InternalNodeSpace_InternalNode::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 InternalNodeSpace_InternalNode::id() const {
  // @@protoc_insertion_point(field_get:croco.InternalNodeSpace.InternalNode.id)
  return id_;
}
inline void InternalNodeSpace_InternalNode::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:croco.InternalNodeSpace.InternalNode.id)
}

// uint32 parent = 2;
inline void InternalNodeSpace_InternalNode::clear_parent() {
  parent_ = 0u;
}
inline ::google::protobuf::uint32 InternalNodeSpace_InternalNode::parent() const {
  // @@protoc_insertion_point(field_get:croco.InternalNodeSpace.InternalNode.parent)
  return parent_;
}
inline void InternalNodeSpace_InternalNode::set_parent(::google::protobuf::uint32 value) {
  
  parent_ = value;
  // @@protoc_insertion_point(field_set:croco.InternalNodeSpace.InternalNode.parent)
}

// repeated uint32 pivot = 3;
inline int InternalNodeSpace_InternalNode::pivot_size() const {
  return pivot_.size();
}
inline void InternalNodeSpace_InternalNode::clear_pivot() {
  pivot_.Clear();
}
inline ::google::protobuf::uint32 InternalNodeSpace_InternalNode::pivot(int index) const {
  // @@protoc_insertion_point(field_get:croco.InternalNodeSpace.InternalNode.pivot)
  return pivot_.Get(index);
}
inline void InternalNodeSpace_InternalNode::set_pivot(int index, ::google::protobuf::uint32 value) {
  pivot_.Set(index, value);
  // @@protoc_insertion_point(field_set:croco.InternalNodeSpace.InternalNode.pivot)
}
inline void InternalNodeSpace_InternalNode::add_pivot(::google::protobuf::uint32 value) {
  pivot_.Add(value);
  // @@protoc_insertion_point(field_add:croco.InternalNodeSpace.InternalNode.pivot)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InternalNodeSpace_InternalNode::pivot() const {
  // @@protoc_insertion_point(field_list:croco.InternalNodeSpace.InternalNode.pivot)
  return pivot_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InternalNodeSpace_InternalNode::mutable_pivot() {
  // @@protoc_insertion_point(field_mutable_list:croco.InternalNodeSpace.InternalNode.pivot)
  return &pivot_;
}

// repeated uint32 children = 4;
inline int InternalNodeSpace_InternalNode::children_size() const {
  return children_.size();
}
inline void InternalNodeSpace_InternalNode::clear_children() {
  children_.Clear();
}
inline ::google::protobuf::uint32 InternalNodeSpace_InternalNode::children(int index) const {
  // @@protoc_insertion_point(field_get:croco.InternalNodeSpace.InternalNode.children)
  return children_.Get(index);
}
inline void InternalNodeSpace_InternalNode::set_children(int index, ::google::protobuf::uint32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:croco.InternalNodeSpace.InternalNode.children)
}
inline void InternalNodeSpace_InternalNode::add_children(::google::protobuf::uint32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:croco.InternalNodeSpace.InternalNode.children)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InternalNodeSpace_InternalNode::children() const {
  // @@protoc_insertion_point(field_list:croco.InternalNodeSpace.InternalNode.children)
  return children_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InternalNodeSpace_InternalNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:croco.InternalNodeSpace.InternalNode.children)
  return &children_;
}

// repeated float borders = 5;
inline int InternalNodeSpace_InternalNode::borders_size() const {
  return borders_.size();
}
inline void InternalNodeSpace_InternalNode::clear_borders() {
  borders_.Clear();
}
inline float InternalNodeSpace_InternalNode::borders(int index) const {
  // @@protoc_insertion_point(field_get:croco.InternalNodeSpace.InternalNode.borders)
  return borders_.Get(index);
}
inline void InternalNodeSpace_InternalNode::set_borders(int index, float value) {
  borders_.Set(index, value);
  // @@protoc_insertion_point(field_set:croco.InternalNodeSpace.InternalNode.borders)
}
inline void InternalNodeSpace_InternalNode::add_borders(float value) {
  borders_.Add(value);
  // @@protoc_insertion_point(field_add:croco.InternalNodeSpace.InternalNode.borders)
}
inline const ::google::protobuf::RepeatedField< float >&
InternalNodeSpace_InternalNode::borders() const {
  // @@protoc_insertion_point(field_list:croco.InternalNodeSpace.InternalNode.borders)
  return borders_;
}
inline ::google::protobuf::RepeatedField< float >*
InternalNodeSpace_InternalNode::mutable_borders() {
  // @@protoc_insertion_point(field_mutable_list:croco.InternalNodeSpace.InternalNode.borders)
  return &borders_;
}

// -------------------------------------------------------------------

// InternalNodeSpace

// repeated .croco.InternalNodeSpace.InternalNode nodes = 1;
inline int InternalNodeSpace::nodes_size() const {
  return nodes_.size();
}
inline void InternalNodeSpace::clear_nodes() {
  nodes_.Clear();
}
inline ::croco::InternalNodeSpace_InternalNode* InternalNodeSpace::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:croco.InternalNodeSpace.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::croco::InternalNodeSpace_InternalNode >*
InternalNodeSpace::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:croco.InternalNodeSpace.nodes)
  return &nodes_;
}
inline const ::croco::InternalNodeSpace_InternalNode& InternalNodeSpace::nodes(int index) const {
  // @@protoc_insertion_point(field_get:croco.InternalNodeSpace.nodes)
  return nodes_.Get(index);
}
inline ::croco::InternalNodeSpace_InternalNode* InternalNodeSpace::add_nodes() {
  // @@protoc_insertion_point(field_add:croco.InternalNodeSpace.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::croco::InternalNodeSpace_InternalNode >&
InternalNodeSpace::nodes() const {
  // @@protoc_insertion_point(field_list:croco.InternalNodeSpace.nodes)
  return nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace croco

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_repository_2eproto
